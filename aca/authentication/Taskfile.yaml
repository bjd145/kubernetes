version: '3'

env:
  TITLE: Azure Container App Environment Authentication 
  DEFAULT_REGION: canadaeast
  APP_NAME: httpbin

tasks:
  default:
    cmds:
    - task --list 

  up:
    desc: Creates a complete {{.TITLE}} demo
    cmds:
    - task: init
    - task: apply
    - task: deploy

  init:
    desc: Initializes Terraform 
    cmds:
    - terraform workspace new {{.REGION}} || true
    - terraform workspace select {{.REGION}}
    - terraform init
    vars: 
      REGION: '{{default .DEFAULT_REGION .CLI_ARGS}}'
  
  apply:
    desc: Applies Terraform 
    cmds:
    - terraform apply -auto-approve -var "tags={{.TITLE}}" -var "region={{.REGION}}" -compact-warnings
    vars: 
      REGION: '{{default .DEFAULT_REGION .CLI_ARGS}}'
  
  secret:
    desc: Creates the App Registration Secret for Authentication
    cmds:
    - cmd: az containerapp secret set -n {{.APP_NAME}} -g {{.RG}} --secrets  microsoft-provider-authentication-secret={{.SECRET}} 
      silent: true
    vars:
      RG:
        sh: terraform output -raw RESOURCE_GROUP
      SECRET: '{{default "REPLACE_ME" .CLI_ARGS}}'

  auth:
    desc: Applies AUthentication COnfiguration to Container Application
    cmds:
    - az deployment group create --verbose -g {{.RG}} --template-file ./authConfig/azuredeploy.json --parameters @./authConfig/azuredeploy.parameters.json --parameters tenantID={{.AAD_TENANT_ID}} --parameters vmIdentityId={{.VM_CLIENT_ID}} 
    vars:
      RG:
        sh: terraform output -raw RESOURCE_GROUP
      AAD_TENANT_ID:
        sh: terraform output -raw AAD_TENANT_ID
      VM_CLIENT_ID:
        sh: terraform output -raw VM_CLIENT_ID

  deploy:
    desc: Deploys httpbin and client Container Apps
    cmds:
    - az containerapp create -n {{.APP_NAME}} -g {{.RG}} --environment {{.CAE}} --yaml "./apps/httpbin.yaml"
    vars: 
      RG: 
        sh: terraform output -raw RESOURCE_GROUP      
      CAE:        
        sh: terraform output -raw APP_ENVIRONMENT

  down:
    desc: Destroys all Azure resources and cleans up Terraform
    cmds:
    - az group list --tag Application="{{.TITLE}}" --query "[].name" -o tsv | xargs -ot -n 1 az group delete -y --verbose --no-wait -n  || true
    - rm -rf terraform.tfstate.d .terraform.lock.hcl .terraform terraform.tfstate terraform.tfstate.backup .terraform.tfstate.lock.info || true%

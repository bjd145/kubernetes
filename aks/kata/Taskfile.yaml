version: '3'

vars:
  SKU: "Standard_D4s_v3"
  COUNT: 1

tasks:
  up:
    desc: Creates a complete AKS cluster with Pod Sandboxing enabled

    cmds:
    - terraform workspace new {{.REGION}} || true
    - terraform workspace select {{.REGION}}
    - terraform init
    - terraform apply -auto-approve -var "region={{.REGION}}" -var "vm_size={{.SKU}}" -var "node_count={{.COUNT}}" -compact-warnings
    - task: apply
    vars: 
      REGION: '{{default "southcentralus" .CLI_ARGS}}'
      
  apply:
    cmds:
    - terraform apply -auto-approve -var "region={{.REGION}}" -var "vm_size={{.SKU}}" -var "node_count={{.COUNT}}" -compact-warnings
    - task: creds
    vars: 
      REGION: '{{default "southcentralus" .CLI_ARGS}}'

  deploy:
    cmds:
    - kubectl apply -f manifests/pods.yaml
    - kubectl wait --for=condition=ready pod -l app=kata-demo
    - kubectl get pods
    - kubectl exec -it kata-isolation -- uname -r
    - kubectl exec -it default-isolation -- uname -r
  creds:
    desc: Gets AKS credential file
    cmds:
    - az aks get-credentials -g {{.RG}} -n {{.AKS}} --overwrite-existing
    - kubelogin convert-kubeconfig -l azurecli
    vars:
      RG: 
        sh: terraform output -raw AKS_RESOURCE_GROUP
      AKS: 
        sh: terraform output -raw AKS_CLUSTER_NAME

  down:
    desc: Destroys all Azure resources and cleans up Terraform
    cmds:
    - rm -rf terraform.tfstate.d .terraform.lock.hcl .terraform terraform.tfstate terraform.tfstate.backup .terraform.tfstate.lock.info
    - az group delete -n {{.RG}} --yes || true
    vars:
      RG: 
        sh: terraform  output -raw AKS_RESOURCE_GROUP
